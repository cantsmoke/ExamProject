/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.examproject.GUI;

import com.mycompany.examproject.Fight;
import com.mycompany.examproject.GUI.ThisItemAlreadySelectedDialog;
import com.mycompany.examproject.GUIandLogicIntermediary;
import com.mycompany.examproject.Items.Armor;
import com.mycompany.examproject.Items.Equipment;
import com.mycompany.examproject.Items.Potion;
import com.mycompany.examproject.Items.Potions.Bomb;
import com.mycompany.examproject.Items.Potions.EstusBottle;
import com.mycompany.examproject.Items.Potions.Poison;
import com.mycompany.examproject.Items.Potions.StaminaPotion;
import com.mycompany.examproject.Items.Weapon;
import com.mycompany.examproject.Player;
import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
/**
 *
 * @author Arseniy
 */
public class InventoryForm extends javax.swing.JFrame {

    /**
     * Creates new form InventoryForm
     */
    public InventoryForm() {
        initComponents();
        getContentPane().setBackground(Color.BLACK);
        setLocationRelativeTo(null);
        
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                closeInventoryButtonActionPerformed();
            }
        });
        
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        inventoryPanel = new javax.swing.JPanel();
        armorScrollPane = new javax.swing.JScrollPane();
        armorList = new javax.swing.JList<>();
        potionsScrollPane = new javax.swing.JScrollPane();
        potionList = new javax.swing.JList<>();
        weaponScrollPane = new javax.swing.JScrollPane();
        weaponList = new javax.swing.JList<>();
        weaponLabel = new javax.swing.JLabel();
        armorLabel = new javax.swing.JLabel();
        potionLabel = new javax.swing.JLabel();
        equipeUseButton = new javax.swing.JButton();
        itemIconLabel = new javax.swing.JLabel();
        itemNameLabel = new javax.swing.JLabel();
        itemWeightLabel = new javax.swing.JLabel();
        itemDamageOrDamageReductionLabel = new javax.swing.JLabel();
        itemDurabilityLabel = new javax.swing.JLabel();
        repairButton = new javax.swing.JButton();
        closeInventoryButton = new javax.swing.JButton();
        repairComponentsAmountLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        inventoryPanel.setBackground(new java.awt.Color(0, 0, 0));

        armorList.setBackground(new java.awt.Color(51, 51, 51));
        armorList.setFont(new java.awt.Font("Yu Mincho Light", 0, 12)); // NOI18N
        armorList.setForeground(new java.awt.Color(204, 204, 204));
        armorList.setSelectionBackground(new java.awt.Color(102, 0, 153));
        armorList.setSelectionForeground(new java.awt.Color(204, 204, 204));
        armorList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                armorListValueChanged(evt);
            }
        });
        armorScrollPane.setViewportView(armorList);

        potionList.setBackground(new java.awt.Color(51, 51, 51));
        potionList.setFont(new java.awt.Font("Yu Mincho Light", 0, 12)); // NOI18N
        potionList.setForeground(new java.awt.Color(204, 204, 204));
        potionList.setSelectionBackground(new java.awt.Color(102, 0, 153));
        potionList.setSelectionForeground(new java.awt.Color(204, 204, 204));
        potionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                potionListValueChanged(evt);
            }
        });
        potionsScrollPane.setViewportView(potionList);

        weaponList.setBackground(new java.awt.Color(51, 51, 51));
        weaponList.setFont(new java.awt.Font("Yu Mincho Light", 0, 12)); // NOI18N
        weaponList.setForeground(new java.awt.Color(204, 204, 204));
        weaponList.setFocusTraversalPolicyProvider(true);
        weaponList.setSelectionBackground(new java.awt.Color(102, 0, 153));
        weaponList.setSelectionForeground(new java.awt.Color(204, 204, 204));
        weaponList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                weaponListValueChanged(evt);
            }
        });
        weaponScrollPane.setViewportView(weaponList);

        weaponLabel.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        weaponLabel.setForeground(new java.awt.Color(204, 204, 204));
        weaponLabel.setText("Weapons");

        armorLabel.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        armorLabel.setForeground(new java.awt.Color(204, 204, 204));
        armorLabel.setText("ARMOR");

        potionLabel.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        potionLabel.setForeground(new java.awt.Color(204, 204, 204));
        potionLabel.setText("POTIONS/Throwable");

        equipeUseButton.setBackground(new java.awt.Color(102, 102, 102));
        equipeUseButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        equipeUseButton.setForeground(new java.awt.Color(204, 204, 204));
        equipeUseButton.setText("Equipe/Use");
        equipeUseButton.setBorder(null);
        equipeUseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equipeUseButtonActionPerformed(evt);
            }
        });

        itemNameLabel.setFont(new java.awt.Font("Castellar", 0, 11)); // NOI18N
        itemNameLabel.setForeground(new java.awt.Color(204, 204, 204));
        itemNameLabel.setText("Item name: unknown");

        itemWeightLabel.setFont(new java.awt.Font("Castellar", 0, 11)); // NOI18N
        itemWeightLabel.setForeground(new java.awt.Color(204, 204, 204));
        itemWeightLabel.setText("Item weight: unknown");

        itemDamageOrDamageReductionLabel.setFont(new java.awt.Font("Castellar", 0, 11)); // NOI18N
        itemDamageOrDamageReductionLabel.setForeground(new java.awt.Color(204, 204, 204));
        itemDamageOrDamageReductionLabel.setText("Item parametr: unknown");

        itemDurabilityLabel.setFont(new java.awt.Font("Castellar", 0, 11)); // NOI18N
        itemDurabilityLabel.setForeground(new java.awt.Color(204, 204, 204));
        itemDurabilityLabel.setText("Item durability: unknown");

        repairButton.setBackground(new java.awt.Color(102, 102, 102));
        repairButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        repairButton.setForeground(new java.awt.Color(204, 204, 204));
        repairButton.setText("REPAIR");
        repairButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repairButtonActionPerformed(evt);
            }
        });

        closeInventoryButton.setBackground(new java.awt.Color(102, 102, 102));
        closeInventoryButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        closeInventoryButton.setForeground(new java.awt.Color(204, 204, 204));
        closeInventoryButton.setText("Close");
        closeInventoryButton.setBorder(null);
        closeInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeInventoryButtonActionPerformed(evt);
            }
        });

        repairComponentsAmountLabel.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        repairComponentsAmountLabel.setForeground(new java.awt.Color(204, 204, 204));
        repairComponentsAmountLabel.setText("AMOUNT OF REPAIRING COMPONENTS:");

        javax.swing.GroupLayout inventoryPanelLayout = new javax.swing.GroupLayout(inventoryPanel);
        inventoryPanel.setLayout(inventoryPanelLayout);
        inventoryPanelLayout.setHorizontalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inventoryPanelLayout.createSequentialGroup()
                                .addComponent(weaponScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(armorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inventoryPanelLayout.createSequentialGroup()
                                .addComponent(itemIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemDurabilityLabel)
                                    .addComponent(itemDamageOrDamageReductionLabel)
                                    .addComponent(itemWeightLabel)
                                    .addComponent(itemNameLabel)))))
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(repairComponentsAmountLabel)))
                .addGap(18, 18, 18)
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(repairButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(potionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equipeUseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closeInventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(weaponLabel)
                .addGap(192, 192, 192)
                .addComponent(armorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(potionLabel)
                .addGap(41, 41, 41))
        );
        inventoryPanelLayout.setVerticalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(armorLabel)
                        .addComponent(weaponLabel))
                    .addComponent(potionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(potionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(armorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weaponScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, inventoryPanelLayout.createSequentialGroup()
                                .addComponent(itemNameLabel)
                                .addGap(18, 18, 18)
                                .addComponent(itemWeightLabel)
                                .addGap(18, 18, 18)
                                .addComponent(itemDamageOrDamageReductionLabel)
                                .addGap(18, 18, 18)
                                .addComponent(itemDurabilityLabel))
                            .addComponent(itemIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(repairButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(equipeUseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(closeInventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(repairComponentsAmountLabel))))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void weaponListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_weaponListValueChanged
        if (!evt.getValueIsAdjusting()) {
            Weapon selected = (Weapon) weaponList.getSelectedValue();
            if (selected != null) {
                itemNameLabel.setText("Item name: " + selected.getName());
                itemWeightLabel.setText("Item weight: " + selected.getWeight());
                itemDamageOrDamageReductionLabel.setText("Item damage: " + selected.getDamage());
                itemDurabilityLabel.setText("Item's durability left: " + selected.getDurability() + "/" + selected.getMaxDurability());
                if(selected.getDurability() < selected.getMaxDurability() * 0.2){
                    itemDurabilityLabel.setForeground(Color.RED);
                } else {
                    itemDurabilityLabel.setForeground(new Color(204, 204, 204));
                }
                itemIconLabel.setIcon(new ImageIcon(selected.getImageUrl()));
            }
            armorList.clearSelection();
            potionList.clearSelection();
        }
    }//GEN-LAST:event_weaponListValueChanged

    private void armorListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_armorListValueChanged
        if (!evt.getValueIsAdjusting()) {
            Armor selected = (Armor) armorList.getSelectedValue();
            if (selected != null) {
                itemNameLabel.setText("Item name: " + selected.getName());
                itemWeightLabel.setText("Item weight: " + selected.getWeight());
                itemDamageOrDamageReductionLabel.setText("Item damage reduction(%) : " + selected.getDamageReduction()*100 + "%");
                itemDurabilityLabel.setText("Item's durability left: " + selected.getDurability() + "/" + selected.getMaxDurability());
                if(selected.getDurability() < selected.getMaxDurability() * 0.2){
                    itemDurabilityLabel.setForeground(Color.RED);
                } else {
                    itemDurabilityLabel.setForeground(new Color(204, 204, 204));
                }
                itemIconLabel.setIcon(new ImageIcon(selected.getImageUrl()));
            }
            weaponList.clearSelection();
            potionList.clearSelection();
        }
    }//GEN-LAST:event_armorListValueChanged

    private void closeInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeInventoryButtonActionPerformed
        this.dispose();
        GUIandLogicIntermediary.showNavigationForm();
    }//GEN-LAST:event_closeInventoryButtonActionPerformed

    private void potionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_potionListValueChanged
        if (!evt.getValueIsAdjusting()) {
            Potion selected = (Potion) potionList.getSelectedValue();
            if (selected != null) {
                if(selected instanceof EstusBottle){
                    itemNameLabel.setText("Item name: " + selected.getName());
                    itemWeightLabel.setText("Item weight: no weight");
                    itemDamageOrDamageReductionLabel.setText("Item health regeneration(%): " + ((EstusBottle) selected).getHealthRegenPercentage()*100 + "%");
                    itemDurabilityLabel.setText("Item's uses left: " + ((EstusBottle) selected).getUsesLeft()+ "/" + ((EstusBottle) selected).getMaxUses());
                    if(((EstusBottle) selected).getUsesLeft() <= ((EstusBottle) selected).getMaxUses() * 0.3){
                        itemDurabilityLabel.setForeground(Color.RED);
                    } else {
                        itemDurabilityLabel.setForeground(new Color(204, 204, 204));
                    }
                    itemIconLabel.setIcon(new ImageIcon(((EstusBottle)selected).getImageURL()));
                } else if (selected instanceof StaminaPotion){
                    itemNameLabel.setText("Item name: " + selected.getName());
                    itemWeightLabel.setText("Item weight: no weight");
                    itemDamageOrDamageReductionLabel.setText("Item stamina regen points: " + ((StaminaPotion) selected).getStaminaRegenAmount());
                    itemDurabilityLabel.setText("Item's durability left: no durability, single use");
                    itemIconLabel.setIcon(new ImageIcon(((StaminaPotion) selected).getImageURL()));
                } else if (selected instanceof Bomb){
                    itemNameLabel.setText("Item name: " + selected.getName());
                    itemWeightLabel.setText("Item weight: no weight");
                    itemDamageOrDamageReductionLabel.setText("Item damage: " + ((Bomb) selected).getDamage());
                    itemDurabilityLabel.setText("Item's durability left: no durability, single use");
                    itemIconLabel.setIcon(new ImageIcon(((Bomb) selected).getImageURL()));
                } else if (selected instanceof Poison){
                    itemNameLabel.setText("Item name: " + selected.getName());
                    itemWeightLabel.setText("Item weight: no weight");
                    itemDamageOrDamageReductionLabel.setText("Item damage/duration: " + ((Poison) selected).getDamage() + "/" + ((Poison) selected).getDuration());
                    itemDurabilityLabel.setText("Item's durability left: no durability, single use");
                    itemIconLabel.setIcon(new ImageIcon(((Poison) selected).getImageURL()));
                }
            }
            weaponList.clearSelection();
            armorList.clearSelection();
        }
    }//GEN-LAST:event_potionListValueChanged

    public void closeInventoryButtonActionPerformed() {                                                     
        this.dispose();
        GUIandLogicIntermediary.showNavigationForm();
    } 
    
    private void repairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repairButtonActionPerformed
        Weapon selectedWeapon = weaponList.getSelectedValue();
        Armor selectedArmor = armorList.getSelectedValue();

        if (selectedWeapon != null && selectedWeapon.isBroken()) {
            if(Player.getInstance().getRepairComponents() >= 20){
                selectedWeapon.repair();
                Player.getInstance().setRepairComponents(Player.getInstance().getRepairComponents() - 20);
                WeaponRepairedDialog weaponRepairedDialog = new WeaponRepairedDialog(null, true);
                weaponRepairedDialog.setVisible(true);
            } else {
                WeaponWasNotrepairedDialog weaponWasNotrepairedDialog = new WeaponWasNotrepairedDialog(null,true);
                weaponWasNotrepairedDialog.setVisible(true);
            }
        } else if (selectedArmor != null && selectedArmor.isBroken()) {
            if(Player.getInstance().getRepairComponents() >= 30){
                selectedArmor.repair();
                Player.getInstance().setRepairComponents(Player.getInstance().getRepairComponents() - 30);
                ArmorRepairedDialog ArmorRepairedDialog = new ArmorRepairedDialog(null, true);
                ArmorRepairedDialog.setVisible(true);
            } else {
                ArmorWasNotrepairedDialog armorWasNotrepairedDialog = new ArmorWasNotrepairedDialog(null,true);
                armorWasNotrepairedDialog.setVisible(true);
            }
        } else {
            ChooseOrDoesNotNeedRepairingDialog chooseOrDoesNotNeedRepairingDialog = new ChooseOrDoesNotNeedRepairingDialog(null, true);
            chooseOrDoesNotNeedRepairingDialog.setVisible(true);
        }

        UpdateLabels();
    }//GEN-LAST:event_repairButtonActionPerformed

    private void equipeUseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equipeUseButtonActionPerformed
        Weapon selectedWeapon = weaponList.getSelectedValue();
        Armor selectedArmor = armorList.getSelectedValue();
        Potion selectedPotion = potionList.getSelectedValue();

        Player player = Player.getInstance();

        if (selectedWeapon != null && !selectedWeapon.isBroken()) {
            if (selectedWeapon != Player.getInstance().getSelectedWeapon()){
                player.setSelectedWeapon(selectedWeapon);
                WeaponSelectedDialog weaponSelectedDialog = new WeaponSelectedDialog(null, true, selectedWeapon.getName());
                weaponSelectedDialog.setVisible(true);
                checkSelectedEquipmentWeight();
            } else {
                ThisItemAlreadySelectedDialog thisItemAlreadySelectedDialog = new ThisItemAlreadySelectedDialog(null, true);
                thisItemAlreadySelectedDialog.setVisible(true);
            }
        } else if (selectedArmor != null && !selectedArmor.isBroken()) {
            if (selectedArmor != Player.getInstance().getSelectedArmor()){
                player.setSelectedArmor(selectedArmor);
                ArmorSelectedDialog armorSelectedDialog = new ArmorSelectedDialog(null, true, selectedArmor.getName());
                armorSelectedDialog.setVisible(true);
                checkSelectedEquipmentWeight();
            } else {
                ThisItemAlreadySelectedDialog thisItemAlreadySelectedDialog = new ThisItemAlreadySelectedDialog(null, true);
                thisItemAlreadySelectedDialog.setVisible(true);
            }
        } else if (selectedPotion != null){
            
            if(selectedPotion instanceof EstusBottle){
                int healthBefore = Player.getInstance().getHp();
                int maxHealth = Player.getInstance().getMaxHp();
                ((EstusBottle) selectedPotion).heal(Player.getInstance());
                int newHealth = Player.getInstance().getHp();
                if (healthBefore != maxHealth) {
                    PlayerHealedDialog playerHealedDialog = new PlayerHealedDialog(null, true, newHealth, healthBefore, maxHealth);
                    playerHealedDialog.setVisible(true);
                }
            }
            if(selectedPotion instanceof StaminaPotion){
                ((StaminaPotion) selectedPotion).addStamina(Player.getInstance());
            }
            if(selectedPotion instanceof Bomb || selectedPotion instanceof Poison){
                YouNeedToChooseItemDialog youNeedToChooseItemDialog = new YouNeedToChooseItemDialog(null, true);
                youNeedToChooseItemDialog.setVisible(true);
            }
            
            
        } else {
            YouNeedToChooseItemDialog youNeedToChooseItemDialog = new YouNeedToChooseItemDialog(null, true);
            youNeedToChooseItemDialog.setVisible(true);
        }

        UpdateLabels();
    }//GEN-LAST:event_equipeUseButtonActionPerformed
    
    public void checkSelectedEquipmentWeight(){
        if(Player.getInstance().getTotalEquipmentWeight() >= Player.getInstance().getBearableWeight()){
            WeightAttentionDialog weightAttentionDialog = new WeightAttentionDialog(null, true);
            weightAttentionDialog.setVisible(true);
        }
    }
    
    public void UpdateLabels(){
        List<Equipment> inventory = Player.getInstance().getInventory();
        
        List<Weapon> weapons = new ArrayList<>();
        for (Equipment eq : inventory) {
            if (eq instanceof Weapon) {
                weapons.add((Weapon) eq);
            }
        }

        weapons.sort(Comparator.comparing(Weapon::getName));

        DefaultListModel<Weapon> weaponModel = new DefaultListModel<>();
        for (Weapon w : weapons) {
            weaponModel.addElement(w);
        }
        weaponList.setModel(weaponModel);

        List<Armor> armors = new ArrayList<>();
        for (Equipment eq : inventory) {
            if (eq instanceof Armor) {
                armors.add((Armor) eq);
            }
        }
        armors.sort(Comparator.comparing(Armor::getName));
        DefaultListModel<Armor> armorModel = new DefaultListModel<>();
        for (Armor a : armors) {
            armorModel.addElement(a);
        }
        armorList.setModel(armorModel);

        List<Potion> potions = new ArrayList<>();
        for (Equipment eq : inventory) {
            if (eq instanceof Potion) {
                potions.add((Potion) eq);
            }
        }
        potions.sort(Comparator.comparing(Potion::getName));
        DefaultListModel<Potion> potionModel = new DefaultListModel<>();
        for (Potion p : potions) {
            potionModel.addElement(p);
        }
        potionList.setModel(potionModel);
        
        repairComponentsAmountLabel.setText("AMOUNT OF REPAIRING COMPONENTS: " + Player.getInstance().getRepairComponents());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel armorLabel;
    private javax.swing.JList<Armor> armorList;
    private javax.swing.JScrollPane armorScrollPane;
    private javax.swing.JButton closeInventoryButton;
    private javax.swing.JButton equipeUseButton;
    private javax.swing.JPanel inventoryPanel;
    private javax.swing.JLabel itemDamageOrDamageReductionLabel;
    private javax.swing.JLabel itemDurabilityLabel;
    private javax.swing.JLabel itemIconLabel;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JLabel itemWeightLabel;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel potionLabel;
    private javax.swing.JList<Potion> potionList;
    private javax.swing.JScrollPane potionsScrollPane;
    private javax.swing.JButton repairButton;
    private javax.swing.JLabel repairComponentsAmountLabel;
    private javax.swing.JLabel weaponLabel;
    private javax.swing.JList<Weapon> weaponList;
    private javax.swing.JScrollPane weaponScrollPane;
    // End of variables declaration//GEN-END:variables
}