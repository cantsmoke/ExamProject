/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.examproject.GUI;

import com.mycompany.examproject.GUIandLogicIntermediary;
import com.mycompany.examproject.Items.Potions.Bomb;
import com.mycompany.examproject.Map.CastleMapGenerator;
import com.mycompany.examproject.Map.Room;
import com.mycompany.examproject.Map.RoomType;
import com.mycompany.examproject.Player;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.UIManager;

/**
 * Главное окно управления состоянием персонажа и навигации по игровому миру.
 * <p>
 * Наследуется от {@link javax.swing.JFrame} и предоставляет графический интерфейс для отображения
 * текущих характеристик игрока (таких как здоровье, выносливость, опыт и др.), а также для перемещения
 * между различными локациями или областями игрового мира.
 * <br>
 * Содержит различные информационные панели, кнопки, мини-карту и средства взаимодействия с игровым состоянием.
 * <br>
 * Служит основной точкой взаимодействия пользователя с игровым процессом вне боевых сцен.
 * </p>
 *
 * @author Arseniy
 */
public class StateAndNavigationForm extends javax.swing.JFrame {

    /**
     * Creates new form StateAndNavigationForm
     */
    public StateAndNavigationForm() {
        initComponents();
        getContentPane().setBackground(Color.BLACK);
        setLocationRelativeTo(null);
        
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlayerInfoAndBasicButtonsPanel = new javax.swing.JPanel();
        healthBar = new javax.swing.JProgressBar();
        staminaBar = new javax.swing.JProgressBar();
        inventoryButton = new javax.swing.JButton();
        exitToMainMenuButton = new javax.swing.JButton();
        upgradeMenu = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        playerIconLabel = new javax.swing.JLabel();
        soulsLabel = new javax.swing.JLabel();
        lvlLabel = new javax.swing.JLabel();
        LocationInfoPanel = new javax.swing.JPanel();
        locationImageLabel = new javax.swing.JLabel();
        LocationDescriptionScrollPane = new javax.swing.JScrollPane();
        locationDescriptionArea = new javax.swing.JTextArea();
        exploreLocationButton = new javax.swing.JButton();
        NavigationPanel = new javax.swing.JPanel();
        currentFloorLabel = new javax.swing.JLabel();
        moveNorthButton = new javax.swing.JButton();
        moveWestButton = new javax.swing.JButton();
        moveEastButton = new javax.swing.JButton();
        moveSouthButton = new javax.swing.JButton();
        mapPanel = new MapPanel();
        mapLabel = new javax.swing.JLabel();
        floorNumber = new javax.swing.JLabel();
        useLadderButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(new java.awt.Color(0, 0, 0));

        PlayerInfoAndBasicButtonsPanel.setBackground(new java.awt.Color(0, 0, 0));

        healthBar.setBackground(new java.awt.Color(0, 20, 0));
        healthBar.setFont(new java.awt.Font("Castellar", 0, 10)); // NOI18N
        healthBar.setForeground(new java.awt.Color(0, 153, 0));
        healthBar.setStringPainted(true);

        staminaBar.setBackground(new java.awt.Color(0, 51, 102));
        staminaBar.setFont(new java.awt.Font("Castellar", 0, 10)); // NOI18N
        staminaBar.setForeground(new java.awt.Color(0, 102, 204));
        staminaBar.setStringPainted(true);

        inventoryButton.setBackground(new java.awt.Color(51, 51, 51));
        inventoryButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        inventoryButton.setForeground(new java.awt.Color(204, 204, 204));
        inventoryButton.setText("Inventory");
        inventoryButton.setBorder(null);
        inventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryButtonActionPerformed(evt);
            }
        });

        exitToMainMenuButton.setBackground(new java.awt.Color(51, 51, 51));
        exitToMainMenuButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        exitToMainMenuButton.setForeground(new java.awt.Color(204, 204, 204));
        exitToMainMenuButton.setText("Leave to menu");
        exitToMainMenuButton.setBorder(null);
        exitToMainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitToMainMenuButtonActionPerformed(evt);
            }
        });

        upgradeMenu.setBackground(new java.awt.Color(51, 51, 51));
        upgradeMenu.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        upgradeMenu.setForeground(new java.awt.Color(204, 204, 204));
        upgradeMenu.setText("Upgrade menu");
        upgradeMenu.setBorder(null);
        upgradeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upgradeMenuActionPerformed(evt);
            }
        });

        saveButton.setBackground(new java.awt.Color(51, 51, 51));
        saveButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        saveButton.setForeground(new java.awt.Color(204, 204, 204));
        saveButton.setText("Save game");
        saveButton.setBorder(null);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        playerIconLabel.setBackground(new java.awt.Color(0, 0, 0));
        playerIconLabel.setForeground(new java.awt.Color(255, 255, 255));
        playerIconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ChatGPT Image 3 июн. 2025 г., 17_52_59 (1).png"))); // NOI18N
        playerIconLabel.setBorder(new AntiqueBorder());

        soulsLabel.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        soulsLabel.setForeground(new java.awt.Color(204, 204, 204));
        soulsLabel.setText("CUrreNT souls amount:");

        lvlLabel.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        lvlLabel.setForeground(new java.awt.Color(204, 204, 204));
        lvlLabel.setText("LEVEL:");

        javax.swing.GroupLayout PlayerInfoAndBasicButtonsPanelLayout = new javax.swing.GroupLayout(PlayerInfoAndBasicButtonsPanel);
        PlayerInfoAndBasicButtonsPanel.setLayout(PlayerInfoAndBasicButtonsPanelLayout);
        PlayerInfoAndBasicButtonsPanelLayout.setHorizontalGroup(
            PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createSequentialGroup()
                .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlayerInfoAndBasicButtonsPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(playerIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(inventoryButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(saveButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                    .addComponent(upgradeMenu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                    .addComponent(staminaBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                    .addComponent(healthBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                                    .addComponent(exitToMainMenuButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lvlLabel)
                            .addComponent(soulsLabel))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        PlayerInfoAndBasicButtonsPanelLayout.setVerticalGroup(
            PlayerInfoAndBasicButtonsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerInfoAndBasicButtonsPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(healthBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(staminaBar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playerIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(soulsLabel)
                .addGap(9, 9, 9)
                .addComponent(lvlLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(inventoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(upgradeMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(exitToMainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LocationInfoPanel.setBackground(new java.awt.Color(0, 0, 0));

        locationImageLabel.setBackground(new java.awt.Color(0, 0, 0));
        locationImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        locationImageLabel.setBorder(new AntiqueBorder());

        LocationDescriptionScrollPane.setBackground(new java.awt.Color(0, 0, 0));
        LocationDescriptionScrollPane.setBorder(new AntiqueBorder());
        LocationDescriptionScrollPane.setForeground(new java.awt.Color(0, 0, 0));

        locationDescriptionArea.setEditable(false);
        locationDescriptionArea.setBackground(new java.awt.Color(0, 0, 0));
        locationDescriptionArea.setColumns(20);
        locationDescriptionArea.setFont(new java.awt.Font("Yu Mincho Light", 0, 18)); // NOI18N
        locationDescriptionArea.setForeground(new java.awt.Color(204, 204, 204));
        locationDescriptionArea.setLineWrap(true);
        locationDescriptionArea.setRows(5);
        locationDescriptionArea.setWrapStyleWord(true);
        locationDescriptionArea.setBorder(null);
        locationDescriptionArea.setCaretColor(new java.awt.Color(255, 255, 255));
        LocationDescriptionScrollPane.setViewportView(locationDescriptionArea);

        exploreLocationButton.setBackground(new java.awt.Color(51, 51, 51));
        exploreLocationButton.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        exploreLocationButton.setForeground(new java.awt.Color(204, 204, 204));
        exploreLocationButton.setText("Explore location");
        exploreLocationButton.setBorder(null);
        exploreLocationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exploreLocationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LocationInfoPanelLayout = new javax.swing.GroupLayout(LocationInfoPanel);
        LocationInfoPanel.setLayout(LocationInfoPanelLayout);
        LocationInfoPanelLayout.setHorizontalGroup(
            LocationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LocationInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LocationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(locationImageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LocationDescriptionScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(LocationInfoPanelLayout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(exploreLocationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LocationInfoPanelLayout.setVerticalGroup(
            LocationInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LocationInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(locationImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LocationDescriptionScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exploreLocationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147))
        );

        NavigationPanel.setBackground(new java.awt.Color(0, 0, 0));

        currentFloorLabel.setBackground(new java.awt.Color(0, 0, 0));
        currentFloorLabel.setFont(new java.awt.Font("Castellar", 0, 12)); // NOI18N
        currentFloorLabel.setForeground(new java.awt.Color(204, 204, 204));
        currentFloorLabel.setText("Current floor: ");

        moveNorthButton.setBackground(new java.awt.Color(51, 51, 51));
        moveNorthButton.setForeground(new java.awt.Color(204, 204, 204));
        moveNorthButton.setText("🡹");
        moveNorthButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        moveNorthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveNorthButtonActionPerformed(evt);
            }
        });

        moveWestButton.setBackground(new java.awt.Color(51, 51, 51));
        moveWestButton.setForeground(new java.awt.Color(204, 204, 204));
        moveWestButton.setText("🡸");
        moveWestButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        moveWestButton.setPreferredSize(new java.awt.Dimension(75, 75));
        moveWestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveWestButtonActionPerformed(evt);
            }
        });

        moveEastButton.setBackground(new java.awt.Color(51, 51, 51));
        moveEastButton.setForeground(new java.awt.Color(204, 204, 204));
        moveEastButton.setText("🡺");
        moveEastButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        moveEastButton.setPreferredSize(new java.awt.Dimension(75, 75));
        moveEastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveEastButtonActionPerformed(evt);
            }
        });

        moveSouthButton.setBackground(new java.awt.Color(51, 51, 51));
        moveSouthButton.setForeground(new java.awt.Color(204, 204, 204));
        moveSouthButton.setText("🡻");
        moveSouthButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        moveSouthButton.setPreferredSize(new java.awt.Dimension(75, 75));
        moveSouthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveSouthButtonActionPerformed(evt);
            }
        });

        mapPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 243, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );

        mapLabel.setBackground(new java.awt.Color(0, 0, 0));
        mapLabel.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        mapLabel.setForeground(new java.awt.Color(204, 204, 204));
        mapLabel.setText("Floor map");

        floorNumber.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        floorNumber.setForeground(new java.awt.Color(204, 204, 204));

        useLadderButton.setFont(new java.awt.Font("Castellar", 0, 14)); // NOI18N
        useLadderButton.setForeground(new java.awt.Color(0, 0, 0));
        useLadderButton.setText("Use ladder");
        useLadderButton.setBorder(null);
        useLadderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useLadderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NavigationPanelLayout = new javax.swing.GroupLayout(NavigationPanel);
        NavigationPanel.setLayout(NavigationPanelLayout);
        NavigationPanelLayout.setHorizontalGroup(
            NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NavigationPanelLayout.createSequentialGroup()
                .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NavigationPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(floorNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NavigationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(NavigationPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(moveWestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(currentFloorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveEastButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NavigationPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NavigationPanelLayout.createSequentialGroup()
                        .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(moveSouthButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(moveNorthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(186, 186, 186))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NavigationPanelLayout.createSequentialGroup()
                        .addComponent(mapLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NavigationPanelLayout.createSequentialGroup()
                        .addComponent(useLadderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127))))
        );
        NavigationPanelLayout.setVerticalGroup(
            NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NavigationPanelLayout.createSequentialGroup()
                .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NavigationPanelLayout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(currentFloorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(floorNumber))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NavigationPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(mapLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(moveNorthButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NavigationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moveWestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moveEastButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moveSouthButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(useLadderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PlayerInfoAndBasicButtonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LocationInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NavigationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PlayerInfoAndBasicButtonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(NavigationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(LocationInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Обрабатывает нажатие кнопки выхода в главное меню.
    * <p>
    * Создает и отображает главное меню {@link MainMenuForm}, закрывая текущее окно навигации.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки выхода.
    */
    private void exitToMainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitToMainMenuButtonActionPerformed
        MainMenuForm mainMenu = new MainMenuForm();
        mainMenu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_exitToMainMenuButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки сохранения игры.
    * <p>
    * Запускает процедуру сохранения текущего состояния через {@link GUIandLogicIntermediary#saveCurrentGame()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки сохранения.
    */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        GUIandLogicIntermediary.saveCurrentGame();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки движения на запад.
    * <p>
    * Передает команду на обработку перемещения игрока в западном направлении через {@link GUIandLogicIntermediary#handlePLayerGoingWest()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки движения на запад.
    */
    private void moveWestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveWestButtonActionPerformed
        GUIandLogicIntermediary.handlePLayerGoingWest();
    }//GEN-LAST:event_moveWestButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки движения на север.
    * <p>
    * Передает команду на обработку перемещения игрока в северном направлении через {@link GUIandLogicIntermediary#handlePLayerGoingNorth()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки движения на север.
    */
    private void moveNorthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveNorthButtonActionPerformed
        GUIandLogicIntermediary.handlePLayerGoingNorth();
    }//GEN-LAST:event_moveNorthButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки открытия инвентаря.
    * <p>
    * Вызывает отображение окна инвентаря через {@link GUIandLogicIntermediary#openInventory()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки инвентаря.
    */
    private void inventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryButtonActionPerformed
        GUIandLogicIntermediary.openInventory();
    }//GEN-LAST:event_inventoryButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки открытия меню улучшений.
    * <p>
    * Запускает открытие меню улучшений через {@link GUIandLogicIntermediary#openUpgradeMenu()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки меню улучшений.
    */
    private void upgradeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upgradeMenuActionPerformed
        GUIandLogicIntermediary.openUpgradeMenu();
    }//GEN-LAST:event_upgradeMenuActionPerformed

    /**
    * Обрабатывает нажатие кнопки движения на восток.
    * <p>
    * Передает команду на обработку перемещения игрока в восточном направлении через {@link GUIandLogicIntermediary#handlePLayerGoingEast()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки движения на восток.
    */
    private void moveEastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveEastButtonActionPerformed
        GUIandLogicIntermediary.handlePLayerGoingEast();
    }//GEN-LAST:event_moveEastButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки движения на юг.
    * <p>
    * Передает команду на обработку перемещения игрока в южном направлении через {@link GUIandLogicIntermediary#handlePLayerGoingSouth()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки движения на юг.
    */
    private void moveSouthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveSouthButtonActionPerformed
        GUIandLogicIntermediary.handlePLayerGoingSouth();
    }//GEN-LAST:event_moveSouthButtonActionPerformed

    /**
    * Обрабатывает нажатие кнопки использования лестницы или перехода между этажами.
    * <p>
    * Выводит в консоль номер текущего этажа игрока до и после попытки перехода через {@link GUIandLogicIntermediary#handlePLayerUsingStairs()}.
    * </p>
    * 
    * @param evt Событие, вызванное нажатием кнопки использования лестницы.
    */
    private void useLadderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useLadderButtonActionPerformed
        System.out.println(Player.getInstance().getCurrentRoom().getFloor());
        GUIandLogicIntermediary.handlePLayerUsingStairs();
        System.out.println(Player.getInstance().getCurrentRoom().getFloor());
    }//GEN-LAST:event_useLadderButtonActionPerformed
    
    /**
    * Обрабатывает нажатие кнопки исследования текущей локации.
    * <p>
    * Запускает процесс исследования локации через {@link GUIandLogicIntermediary#handlePLayerExploringLocation()}.
    * </p>
    *
    * @param evt Событие, вызванное нажатием кнопки исследования.
    */
    private void exploreLocationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exploreLocationButtonActionPerformed
        GUIandLogicIntermediary.handlePLayerExploringLocation();
    }//GEN-LAST:event_exploreLocationButtonActionPerformed

    /**
    * Обновляет графические элементы формы в соответствии с текущим состоянием игрока и локации.
    * <p>
    * Устанавливает изображение локации и её описание, актуализирует показатели здоровья и выносливости на полосах,
    * отображает уровень, число душ, номер этажа. Изменяет цвет полосы здоровья при низких значениях HP.
    * Перерисовывает мини-карту, проверяет доступность лестниц и навигационных кнопок.
    * </p>
    */
    public void updateLabels(){
        locationImageLabel.setIcon(new ImageIcon(getClass().getResource(Player.getInstance().getCurrentRoom().getRoomPictureSource())));
        locationDescriptionArea.setText(Player.getInstance().getCurrentRoom().getDescription());
        
        locationDescriptionArea.setEnabled(false);
        
        if(Player.getInstance().getHp() < Player.getInstance().getMaxHp() * 0.2){
            healthBar.setForeground(Color.red);
        }
        
        healthBar.setMaximum(Player.getInstance().getMaxHp());
        healthBar.setValue(Player.getInstance().getHp());
        healthBar.setString(Player.getInstance().getHp() + "/" + Player.getInstance().getMaxHp());
        staminaBar.setMaximum(Player.getInstance().getMaxStamina());
        staminaBar.setValue(Player.getInstance().getStamina());
        staminaBar.setString(Player.getInstance().getStamina()+ "/" + Player.getInstance().getMaxStamina());
        healthBar.repaint();
        staminaBar.repaint();
        if(Player.getInstance().getHp() < Player.getInstance().getMaxHp() * 0.25){
            healthBar.setForeground(Color.red);
            healthBar.setBackground(new Color(50, 0, 0));
        } else {
            healthBar.setForeground(new Color(0, 153, 0));
            healthBar.setBackground(new Color(0, 20, 0));
        }
        
        checkIfLadder();

        mapPanel.repaint();
        
        floorNumber.setText(String.valueOf(Player.getInstance().getCurrentRoom().getFloor()));
        
        checkNavigationButtonsAvailability();
        
        soulsLabel.setText("Current souls amount: " + Player.getInstance().getCurrentSoulsAmount());
        lvlLabel.setText("Level: " + Player.getInstance().getLevel());
        
        UIManager.put("Button.disabledText", Color.BLACK);
    }
    
    /**
    * Проверяет, находится ли игрок сейчас в комнате с лестницей, и настраивает кнопку подъёма/спуска.
    * <p>
    * Если комната является лестничной клеткой (вверх или вниз), активирует кнопку лестницы и изменяет её цвета.
    * Иначе кнопка делается неактивной и окрашивается в основной цвет окна.
    * </p>
    */
    private void checkIfLadder() {
        if (Player.getInstance().getCurrentRoom().getType() == RoomType.STAIRCASE_DOWN || Player.getInstance().getCurrentRoom().getType() == RoomType.STAIRCASE_UP){
            useLadderButton.setForeground(new Color(204, 204, 204));
            useLadderButton.setBackground(new Color(51, 51, 51));
            useLadderButton.setEnabled(true);
        } else {
            useLadderButton.setBackground(new Color(0, 0, 0));
            useLadderButton.setEnabled(false);
            useLadderButton.setForeground(new Color(0, 0, 0));
        }
    }
    
    /**
    * Устанавливает состояние доступности (enabled/disabled) кнопок навигации в зависимости от
    * наличия комнат соответствующих направлений (север, юг, восток, запад).
    * <p>
    * Также регулирует доступность кнопки "Исследовать локацию" в зависимости от типа комнаты и уже совершённого исследования.
    * </p>
    */
    private void checkNavigationButtonsAvailability() {
        int floor = Player.getInstance().getCurrentRoom().getFloor();
        int x = Player.getInstance().getCurrentRoom().getX();
        int y = Player.getInstance().getCurrentRoom().getY();
        
        Room roomToEast = CastleMapGenerator.getRoomToEast(x, y, floor);
        Room roomToWest = CastleMapGenerator.getRoomToWest(x, y, floor);
        Room roomNorth = CastleMapGenerator.getRoomNorth(x, y, floor);
        Room roomSouth = CastleMapGenerator.getRoomSouth(x, y, floor);
        
        if(roomToEast == null){
            moveEastButton.setEnabled(false);
        } else {
            moveEastButton.setEnabled(true);
        }
        
        if(roomToWest == null){
            moveWestButton.setEnabled(false);
        } else {
            moveWestButton.setEnabled(true);
        }
        
        if(roomNorth == null){
            moveNorthButton.setEnabled(false);
        } else {
            moveNorthButton.setEnabled(true);
        }
        
        if(roomSouth == null){
            moveSouthButton.setEnabled(false);
        } else {
            moveSouthButton.setEnabled(true);
        }
        
        if(Player.getInstance().getCurrentRoom().getType() == RoomType.STAIRCASE_DOWN || Player.getInstance().getCurrentRoom().getType() == RoomType.STAIRCASE_UP || 
           Player.getInstance().getCurrentRoom().getType() == RoomType.ENTRANCE_HALL || Player.getInstance().getCurrentRoom().getType() == RoomType.BOSS ||
           Player.getInstance().getCurrentRoom().wasExplored() == true || Player.getInstance().getCurrentRoom().getType() == RoomType.REST){
            exploreLocationButton.setEnabled(false);
        } else {
            exploreLocationButton.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane LocationDescriptionScrollPane;
    private javax.swing.JPanel LocationInfoPanel;
    private javax.swing.JPanel NavigationPanel;
    private javax.swing.JPanel PlayerInfoAndBasicButtonsPanel;
    private javax.swing.JLabel currentFloorLabel;
    private javax.swing.JButton exitToMainMenuButton;
    private javax.swing.JButton exploreLocationButton;
    private javax.swing.JLabel floorNumber;
    private javax.swing.JProgressBar healthBar;
    private javax.swing.JButton inventoryButton;
    private javax.swing.JTextArea locationDescriptionArea;
    private javax.swing.JLabel locationImageLabel;
    private javax.swing.JLabel lvlLabel;
    private javax.swing.JLabel mapLabel;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JButton moveEastButton;
    private javax.swing.JButton moveNorthButton;
    private javax.swing.JButton moveSouthButton;
    private javax.swing.JButton moveWestButton;
    private javax.swing.JLabel playerIconLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel soulsLabel;
    private javax.swing.JProgressBar staminaBar;
    private javax.swing.JButton upgradeMenu;
    private javax.swing.JButton useLadderButton;
    // End of variables declaration//GEN-END:variables

}